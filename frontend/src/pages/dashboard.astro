---
import Layout from '../layouts/Layout.astro';
import Sidebar from '../components/Sidebar';
---

<Layout title="Dashboard">
  <div id="app-container" class="flex h-screen overflow-hidden">
    <!-- Sidebar -->
    <Sidebar client:load />

    <!-- Main Content -->
    <div class="flex-1 p-6 bg-gray-100 overflow-y-auto">
      <!-- Esto se va a ocultar hasta que se verifique el token -->
      <div id="dashboard-content" class="hidden">
        <h1 class="text-2xl font-bold mb-4">Tablero</h1>
        <div class="grid grid-cols-1 gap-4 mb-6">
          <div class="bg-white shadow rounded-lg p-4">
            <h2 class="text-lg font-semibold bg-green-600 text-white p-2 rounded-t-lg">Resumen de Inventario</h2>
            <div class="flex justify-between p-4">
              <div class="text-center">
                <p class="text-2xl font-bold" id="total-items">0</p>
                <p>Artículos totales</p>
              </div>
              <div class="text-center">
                <p class="text-2xl font-bold" id="admin-items">0</p>
                <p>Artículos totales Administrativo</p>
              </div>
              <div class="text-center">
                <p class="text-2xl font-bold" id="maintenance-items">0</p>
                <p>Artículos totales Aux Mantenimiento</p>
              </div>
            </div>
          </div>
          <div class="bg-white shadow rounded-lg p-4">
            <h2 class="text-lg font-semibold bg-green-600 text-white p-2 rounded-t-lg">Actividad reciente</h2>
            <div class="flex justify-between p-4">
              <div class="text-center">
                <p class="text-2xl font-bold">0</p>
                <p>Fecha y hora</p>
              </div>
              <div class="text-center">
                <p class="text-2xl font-bold">0</p>
                <p>Cantidad</p>
              </div>
              <div class="text-center">
                <p class="text-2xl font-bold">0</p>
                <p>Ubicación</p>
              </div>
            </div>
          </div>
        </div>
        <h2 class="text-lg font-semibold mb-4">Gráfica de Estado</h2>
        <div class="grid gap-4"> 
          <div class="bg-white shadow rounded-lg p-4 flex justify-center">
            <div class="chart-container" style="height: 246px; width: 246px;">
              <canvas id="admin-maintenance-chart"></canvas>
            </div>
          </div>
        </div>
      </div>

      <!-- Error message that will be shown if no token is found -->
      <div id="error-message" class="flex justify-center items-center h-screen text-red-600 text-2xl font-semibold">
        <p>No tienes permisos para acceder a esta página. Por favor, inicia sesión.</p>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Solo se ejecuta en el cliente
    if (typeof window !== 'undefined') {
      const token = localStorage.getItem('token');
      const appContainer = document.getElementById('app-container');
      const errorMessage = document.getElementById('error-message');
      const dashboardContent = document.getElementById('dashboard-content');

      // Recuperar información del usuario del localStorage
      const userId = localStorage.getItem('userId');
      const userName = localStorage.getItem('userName');
      const userEmail = localStorage.getItem('userEmail');

      console.log('Datos del usuario desde localStorage:');
      console.log('ID del usuario:', userId);
      console.log('Nombre del usuario:', userName);
      console.log('Correo del usuario:', userEmail);

      // Verificamos si los elementos existen antes de intentar acceder a sus propiedades
      if (appContainer && errorMessage && dashboardContent) {
        if (!token) {
          // Si no hay token, mostramos el mensaje de error y ocultamos el contenido
          appContainer.style.display = 'none';
          errorMessage.style.display = 'flex';
        } else {
          // Si hay token, mostramos el contenido y ocultamos el mensaje de error
          errorMessage.style.display = 'none';
          dashboardContent.style.display = 'block';

          // Variables para acumular los totales
          let totalAdmin = 0;
          let totalMaintenance = 0;

          // Función para obtener datos de una API
          async function fetchData(url, elementId, callback) {
            try {
              const response = await fetch(url);
              const data = await response.json();
              const totalRecords = data.totalRecords || 0;

              // Actualizamos el elemento específico
              document.getElementById(elementId).textContent = totalRecords;

              // Ejecutamos un callback para manejar el total acumulado
              if (callback) callback(totalRecords);
            } catch (error) {
              console.error(`Error fetching data from ${url}:`, error);
            }
          }

          // Función para actualizar el total general
          function updateTotal(newTotal) {
            const totalItemsElement = document.getElementById('total-items');
            totalItemsElement.textContent = newTotal;
          }

          // Función para renderizar el gráfico
          async function renderChart(adminTotal, maintenanceTotal) {
            const ctx = document.getElementById('admin-maintenance-chart').getContext('2d');

            // Destruir el gráfico existente si ya se había inicializado
            if (window.adminMaintenanceChart) {
              window.adminMaintenanceChart.destroy();
            }

            // Crear el nuevo gráfico
            window.adminMaintenanceChart = new Chart(ctx, {
              type: 'pie',
              data: {
                labels: ['Administrativo', 'Aux Mantenimiento'],
                datasets: [
                  {
                    data: [adminTotal, maintenanceTotal],
                    backgroundColor: ['#4CAF50', '#FF9800'],
                  },
                ],
              },
              options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: {
                    display: true,
                    position: 'bottom',
                  },
                },
              },
            });
          }

          // Llamadas a las APIs
          fetchData('http://localhost:3000/api/inventarioadmin', 'admin-items', (value) => {
            totalAdmin = value;
            updateTotal(totalAdmin + totalMaintenance);
            renderChart(totalAdmin, totalMaintenance); // Actualiza el gráfico al recibir los datos
          });

          fetchData('http://localhost:3000/api/inventario', 'maintenance-items', (value) => {
            totalMaintenance = value;
            updateTotal(totalAdmin + totalMaintenance);
            renderChart(totalAdmin, totalMaintenance); // Actualiza el gráfico al recibir los datos
          });
        }
      } else {
        console.error('Algunos de los elementos no se encontraron en el DOM');
      }
    }
  </script>
</Layout>
